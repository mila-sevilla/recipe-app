{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js","arrow_down.svg"],"names":["module","exports","recipe","recipe_cover","image","expand_button","active","expand_wrapper","expand-enter","expand-enter-active","expand-exit","expand-exit-active","Recipe","_ref","title","ingredients","_useState","useState","_useState2","Object","slicedToArray","showRecipe","setShowRecipe","react_default","a","createElement","className","src","alt","concat","type","aria-label","onClick","arrowImage","CSSTransition","in","timeout","classNames","unmountOnExit","key","map","ingredient","index","text","App","APP_ID","APP_KEY","loading","setLoading","_useState3","_useState4","recipes","setRecipes","_useState5","_useState6","search","setSearch","_useState7","_useState8","query","setQuery","useEffect","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","apply","this","arguments","fetchData","then","hits","catch","onSubmit","e","preventDefault","value","onChange","target","placeholder","length","_ref2","label","calories","src_Recipe","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","__webpack_require__","p"],"mappings":"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","file":"static/js/main.82ee7729.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2oI0-\",\"recipe_cover\":\"recipe_recipe_cover__ICJMj\",\"image\":\"recipe_image__1T42k\",\"expand_button\":\"recipe_expand_button__1ec5j\",\"active\":\"recipe_active__2mPal\",\"expand_wrapper\":\"recipe_expand_wrapper__7yOQv\",\"expand-enter\":\"recipe_expand-enter__736AI\",\"expand-enter-active\":\"recipe_expand-enter-active__jtrRZ\",\"expand-exit\":\"recipe_expand-exit__3U_Lg\",\"expand-exit-active\":\"recipe_expand-exit-active__2wu7T\"};","import React, { useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport {\n  recipe,\n  recipe_cover,\n  expand_wrapper,\n  expand_button,\n  active,\n} from './recipe.module.css';\nimport arrowImage from './arrow_down.svg';\n\nconst Recipe = ({ title, image, ingredients }) => {\n  const [showRecipe, setShowRecipe] = useState(false);\n  const toggleRecipe = () => setShowRecipe(!showRecipe);\n\n  return (\n    <div className={recipe}>\n      <div className={recipe_cover}>\n        <img className={image} src={image} alt=\"\" />\n        <h2> {title} </h2>\n      </div>\n\n      <div className={expand_wrapper}>\n        <button\n          className={`${expand_button} ${showRecipe ? active : ''}`}\n          type=\"button\"\n          aria-label=\"expand\"\n          onClick={toggleRecipe}>\n          {showRecipe ? 'Hide Recipe' : 'Show Recipe'}\n          <img className=\"arrow_down\" alt=\"arrow\" src={arrowImage} />\n        </button>\n\n        <CSSTransition\n          in={showRecipe}\n          timeout={200}\n          classNames=\"expand\"\n          unmountOnExit>\n          <ul key={ingredients}>\n            {ingredients.map((ingredient, index) => (\n              <li key={index}>{ingredient.text}</li>\n            ))}\n          </ul>\n        </CSSTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = '0e82bcb9';\n  const APP_KEY = 'af43474ad40246b9beedbc7fe3b3e67b';\n\n  const [loading, setLoading] = useState(false);\n  const [recipes, setRecipes] = useState(null);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(() => {\n    setLoading(true);\n    async function fetchData() {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      return response.json();\n    }\n    fetchData()\n      .then(({ hits }) => {\n        setLoading(false);\n        setRecipes(hits);\n      })\n      .catch(() => {\n        setLoading(false);\n      });\n  }, [query]);\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1> Recipes </h1>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n          placeholder=\"Enter e.g. smoothie\"\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"flexWrapper\">\n        {loading && (\n          <div className=\"loader\">\n            Searching for recipes ...\n            <div className=\"loader_spinner\" />\n          </div>\n        )}\n        {recipes && !loading && !recipes.length && (\n          <p className=\"noRecipesFound\">\n            No recipes found, try something else!\n          </p>\n        )}\n      </div>\n      <div className=\"recipes\">\n        {recipes &&\n          recipes.map(({ recipe }) => {\n            const { label, calories, image, ingredients } = recipe;\n            return (\n              <Recipe\n                key={label}\n                title={label}\n                calories={calories}\n                image={image}\n                ingredients={ingredients}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/arrow_down.28917e2e.svg\";"],"sourceRoot":""}