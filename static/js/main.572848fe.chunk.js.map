{"version":3,"sources":["recipe.module.css","Toggle.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","recipe_cover","image","expand_button","expand_wrapper","Toggle","state","on","toggle","_this","setState","render","this","props","react_default","a","createElement","Component","Recipe","_ref","title","ingredients","className","style","src","alt","Toggle_Toggle","_ref2","onClick","aria-label","map","ingredient","index","CSSTransition","in","timeout","classNames","key","text","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","arguments","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","src_Recipe","label","calories","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.572848fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2oI0-\",\"recipe_cover\":\"recipe_recipe_cover__ICJMj\",\"image\":\"recipe_image__1T42k\",\"expand_button\":\"recipe_expand_button__1ec5j\",\"expand_wrapper\":\"recipe_expand_wrapper__7yOQv\"};","import React, { Component } from 'react'\n\nexport default class Toggle extends Component {\n    state = {\n        on: false\n    }\n    \n    toggle = () => {\n        this.setState ({\n            on: !this.state.on\n        })\n    }\n\n    render() {\n        const { render } = this.props\n        return (\n            <div>\n                {render({\n                    on: this.state.on,\n                    toggle: this.toggle\n                })}\n            </div>\n        )\n    }\n}","import React from 'react'\nimport style from './recipe.module.css'\nimport Toggle from './Toggle'\nimport { CSSTransition } from 'react-transition-group';\n\n\nconst Recipe = ({title,image, ingredients}) => {\n\n    return(\n        <div className={style.recipe}>\n            <div className={style.recipe_cover}> \n                <img className={style.image}src={image} alt=''/>\n                <h2> {title} </h2>\n            </div>\n            <Toggle \n                render={({on, toggle}) => (\n                    <div className={style.expand_wrapper}>\n                        <button className={style.expand_button} onClick={toggle} aria-label='expand'> Show Recipe </button>\n                        {on && \n                            <ul>\n                                {ingredients.map((ingredient, index) => (\n                                    <CSSTransition in={on} timeout={200} classNames=\"appear\"> \n                                        <li key={index}>{ingredient.text} </li>\n                                    </CSSTransition>\n                                ))}\n                            </ul>\n                        }\n                    </div>\n            )} /> \n        </div>\n    )\n}\n\nexport default Recipe","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe'\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = '0e82bcb9'\n  const APP_KEY = 'af43474ad40246b9beedbc7fe3b3e67b'\n\n  const [recipes, setRecipes] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('chicken')\n\n  useEffect(() => {\n    getRecipes()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query])\n\n  const getRecipes = async () => {\n    const response = await fetch( `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json()\n    setRecipes(data.hits)\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value)\n  }\n\n  const getSearch = e => {\n    e.preventDefault()\n    setQuery(search)\n  }\n\n  return (\n    <div className='App'>\n      <h1> Recipes </h1>\n      <form onSubmit={getSearch} className='search-form'>\n        <input \n          className='search-bar' \n          type='text' \n          value={search} \n          onChange={updateSearch}\n          placeholder='Enter e.g. chicken'/>\n        <button className='search-button' type='submit'>Search</button>\n      </form>\n      <div className='recipes'>\n        {recipes.map(recipe => (\n          <Recipe \n            key={recipe.recipe.label}\n            title={recipe.recipe.label} \n            calories={recipe.recipe.calories} \n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}